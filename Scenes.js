const { Markup, Scenes } = require('telegraf');

const { enter, leave } = Scenes.Stage;

const constants = require('./const');
const { namazTime } = require('./prayCalc');

class SceneGenerator {
  GenGreeterSchene() {
    const greeterScene = new Scenes.BaseScene('greeter');
    greeterScene.enter((ctx) =>
      ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name}!\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫\n–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É—Å—Ç–∞ —Å–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ üëá`,
        Markup.inlineKeyboard([[Markup.button.callback('–ë–∏—Å–º–∏–ª–ª—è—Ö', 'choose_location')]]),
      ),
    );
    greeterScene.leave((ctx) => ctx.reply('Bye'));
    greeterScene.action('choose_location', (ctx) => {
      ctx.answerCbQuery();
      enter('location');
    });

    return greeterScene;
  }
  GenLocationSchene() {
    const locationScene = new Scenes.BaseScene('location');
    locationScene.enter((ctx) =>
      ctx.reply(
        'üó∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n‚ö†Ô∏è–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–±—Ä–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏',
        Markup.inlineKeyboard([
          [Markup.button.callback('–° –ø–æ–º–æ—â—å—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ', 'custom_location')],
          [
            Markup.button.callback('–¢–∞—à–∫–µ–Ω—Ç', 'location_1'),
            Markup.button.callback('–ê–Ω–¥–∏–∂–∞–Ω', 'location_3'),
            Markup.button.callback('–ë—É—Ö–∞—Ä–∞', 'location_4'),
          ],
          [
            Markup.button.callback('–î–∂–∏–∑–∞–∫', 'location_5'),
            Markup.button.callback('–ö–∞—à–∫–∞–¥–∞—Ä—å—è', 'location_6'),
            Markup.button.callback('–ù–∞–≤–æ–∏', 'location_7'),
          ],
          [
            Markup.button.callback('–ù–∞–º–∞–Ω–≥–∞–Ω', 'location_8'),
            Markup.button.callback('–°–∞–º–∞—Ä–∫–∞–Ω–¥', 'location_9'),
            Markup.button.callback('–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è', 'location_10'),
          ],
          [
            Markup.button.callback('–°—ã—Ä–¥–∞—Ä—å—è', 'location_11'),
            Markup.button.callback('–§–µ—Ä–≥–∞–Ω–∞', 'location_12'),
            Markup.button.callback('–•–æ—Ä–µ–∑–º', 'location_13'),
          ],
          [Markup.button.callback('–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω', 'location_2')],
        ]),
      ),
    );
    locationScene.leave((ctx) => ctx.reply('Bye'));

    for (let index = 1; index < 14; index++) {
      locationScene.action(`location_${index}`, (ctx) => {
        ctx.answerCbQuery();
        locationSceneAction(ctx, locationScene);
      });
    }
    return locationScene;
  }
}
function locationSceneAction(ctx, scene) {
  scene.leave();
  location = constants[`${ctx.match[0]}`];
  ctx.prayTime = new namazTime(location);
  console.log('Second place', ctx.prayTime);
  ctx.reply(
    '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ',
    Markup.keyboard([
      ['‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'],
      ['üó∫ –ü–æ–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'],
      ['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
    ]),
  );
}
module.exports = SceneGenerator;
