const { Telegraf, Markup } = require('telegraf');
const { namazTime } = require('./prayCalc');
const constants = require('./const');
require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);

let prayTime = new namazTime();
let notifications = false;
let loc;

bot.start((ctx) =>
  ctx.replyWithHTML(
    `–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name}!\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –ë–∏–ª—è–ª\n–í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É—Å—Ç–∞ —Å–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ üëá`,
    Markup.inlineKeyboard([[Markup.button.callback('–ë–∏—Å–º–∏–ª–ª—è—Ö', 'choose_location')]]),
  ),
);
bot.help((ctx) => ctx.reply('Send me a sticker'));
bot.on('sticker', (ctx) => ctx.reply('üëç'));
bot.hears('hi', (ctx) => ctx.reply('Hey there'));

bot.action(
  'choose_location',
  async (ctx) => (
    await ctx.answerCbQuery(),
    await ctx.replyWithHTML(
      'üó∫ –í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      Markup.inlineKeyboard(constants.inlineButtons),
    )
  ),
);

function locationAction(location_btn) {
  bot.action(
    location_btn,
    async (ctx) => (
      await ctx.answerCbQuery(),
      await ctx.replyWithHTML(
        '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ',
        Markup.keyboard([
          ['‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'],
          ['üó∫ –ü–æ–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'],
          ['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        ]),

        (loc = constants[`${ctx.match[0]}`]),
        (prayTime = new namazTime(loc)),
      )
    ),
  );
}
function addCustomLocation({ latitude, longitude }) {
  prayTime = new namazTime([latitude, longitude]);
}
for (let index = 1; index < 14; index++) {
  locationAction(`location_${index}`);
}

//console.log(prayTime.getTime());
bot.hears('‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', async (ctx) => {
  const { date, fajr, sunrise, dhuhr, asr, maghrib, isha } = prayTime.getTime();

  await ctx.replyWithHTML(
    `‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ ${date}\nüó∫ –¢–∞—à–∫–µ–Ω—Ç|–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω\n\nüåÑ ${fajr} –§–∞–¥–∂—Ä\nüåÖ ${sunrise} –í–æ—Å—Ö–æ–¥\nüåá ${dhuhr} –ó—É—Ö—Ä\nüåÜ ${asr} –ê—Å—Ä\nüèô ${maghrib} –ú–∞–≥—Ä–∏–±\nüåÉ ${isha} –ò—à–∞`,
  );
});

bot.hears(
  'üó∫ –ü–æ–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
  async (ctx) =>
    await ctx.replyWithHTML(
      'üó∫ –í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      Markup.inlineKeyboard(constants.inlineButtons),
    ),
);

function sendNextTime(ctx) {
  const { isChanged, textMessage } = prayTime.isNextTime();
  console.log(textMessage, isChanged);
  ctx.replyWithHTML(prayTime.isNextTime(true).textMessage);

  let msg_id = ctx.update.message.message_id + 2;
  const changesInMinute = setInterval(() => {
    if (!notifications) {
      clearInterval(changesInMinute);
    } else if (isChanged) {
      ctx.deleteMessage(msg_id++);
      ctx.replyWithHTML(textMessage);
    }
  }, 60000);
}
bot.hears(
  'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
  async (ctx) => (
    await ctx.replyWithHTML('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã'),
    (notifications = true),
    notifications ? sendNextTime(ctx) : ''
  ),
);
bot.hears(
  'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
  async (ctx) => (await ctx.replyWithHTML('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'), (notifications = false)),
);
bot.action('custom_location', async (ctx) => {
  ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
  bot.on('message', (ctx) => {
    if (ctx.message.location) {
      addCustomLocation(ctx.message.location);
      ctx.replyWithHTML('–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ');
    }
  });
});

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
