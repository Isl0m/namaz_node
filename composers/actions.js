const { Composer } = require('telegraf');
const { Markup } = require('telegraf');

const { namazTime } = require('../prayCalc');
const constants = require('../const');

const bot = new Composer();

function addCustomLocation({ latitude, longitude }, ctx) {
  ctx.prayTime = new namazTime([latitude, longitude]);
}

function locationAction(location_btn) {
  bot.action(
    location_btn,
    async (ctx) => (
      await ctx.answerCbQuery(),
      await ctx.replyWithHTML(
        '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ',
        Markup.keyboard([
          ['‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'],
          ['üó∫ –ü–æ–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'],
          ['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        ]),

        (ctx.location = constants[`${ctx.match[0]}`]),
        (ctx.prayTime = new namazTime(ctx.location)),
      )
    ),
  );
}

for (let index = 1; index < 14; index++) {
  locationAction(`location_${index}`);
}

bot.action(
  'choose_location',
  async (ctx) => (
    await ctx.answerCbQuery(),
    await ctx.replyWithHTML(
      'üó∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n‚ö†Ô∏è–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–±—Ä–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏',
      Markup.inlineKeyboard(ctx.inlineButtons),
    )
  ),
);

bot.action('custom_location', async (ctx) => {
  ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
  bot.on('message', (ctx) => {
    if (ctx.message.location) {
      addCustomLocation(ctx.message.location, ctx);
      ctx.replyWithHTML(
        '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ',
        Markup.keyboard([
          ['‚åõÔ∏è –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'],
          ['üó∫ –ü–æ–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'],
          ['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        ]),
      );
    }
  });
});

module.exports = bot;
